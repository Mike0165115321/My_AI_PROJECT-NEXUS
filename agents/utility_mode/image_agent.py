# agents/utility_mode/image_agent.py
# (V3 - LLM-Powered & Intelligent)

import requests
import re
import json
from typing import Optional, Dict
from groq import Groq

class ImageAgent:
    """
    Agent ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î: ‡πÉ‡∏ä‡πâ LLM ‡∏™‡∏Å‡∏±‡∏î Keyword)
    """
    def __init__(self, unsplash_key: str, key_manager, model_name: str):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        """
        self.unsplash_key = unsplash_key
        self.groq_key_manager = key_manager
        self.model_name = model_name
        self.api_url = "https://api.unsplash.com/search/photos"
        print("üñºÔ∏è  Image Agent (V3 - LLM-Powered) is ready.")

    def _extract_and_translate_search_term(self, query: str) -> Optional[str]:
        """
        ‡πÉ‡∏ä‡πâ LLM (Groq 8B) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        """
        print(f"  - üß† [Image Agent] Extracting keywords from: '{query}'")
        prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢" ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô "‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©" ‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Image Search API (‡πÄ‡∏ä‡πà‡∏ô Unsplash)

**‡∏Å‡∏é:**
1.  ‡∏≠‡πà‡∏≤‡∏ô "‡∏Ñ‡∏≥‡∏Ç‡∏≠" ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏´‡∏•‡∏±‡∏Å" ‡πÅ‡∏•‡∏∞ "‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô"
2.  ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
3.  ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
4.  ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
5.  ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô String ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**
- ‡∏Ñ‡∏≥‡∏Ç‡∏≠: "‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡∏™‡∏ß‡∏¢‡πÜ ‡∏ï‡∏≠‡∏ô‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏∂‡πâ‡∏ô"
- ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: "beautiful mountain sunrise"

- ‡∏Ñ‡∏≥‡∏Ç‡∏≠: "‡∏Ç‡∏≠‡∏î‡∏π‡∏†‡∏≤‡∏û‡πÅ‡∏°‡∏ß‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÜ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö"
- ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: "cute cat sleeping"

**‡∏Ñ‡∏≥‡∏Ç‡∏≠:** "{query}"
**‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:**
"""
        try:
            api_key = self.groq_key_manager.get_key()
            if not api_key:
                raise Exception("No available Groq API keys.")

            client = Groq(api_key=api_key)
            chat_completion = client.chat.completions.create(
                messages=[{"role": "user", "content": prompt}],
                model=self.model_name,
                temperature=0.1
            )
            search_term = chat_completion.choices[0].message.content.strip().replace('"', '')
            
            if not search_term:
                print("  - ‚ö†Ô∏è LLM returned an empty search term.")
                return None

            print(f"  - ‚úÖ Translated search term: '{search_term}'")
            return search_term
        except Exception as e:
            print(f"  - ‚ö†Ô∏è Keyword extraction for image search failed: {e}")
            return None

    def _search(self, term: str) -> Optional[Dict]:
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        """
        if not self.unsplash_key:
            print("‚ùå [Image Agent] Error: UNSPLASH_ACCESS_KEY is not configured.")
            return None

        params = {
            'query': term,
            'per_page': 1,
            'orientation': 'landscape',
            'lang': 'en'
        }
        headers = {'Authorization': f'Client-ID {self.unsplash_key}'}

        try:
            print(f"üñºÔ∏è  [Image Agent] Searching for '{term}' on Unsplash...")
            response = requests.get(self.api_url, headers=headers, params=params, timeout=10)
            response.raise_for_status()

            data = response.json()
            if results := data.get('results'):
                first_image = results[0]
                image_info = {
                    "url": first_image['urls']['regular'],
                    "description": first_image.get('alt_description', 'No description available.'),
                    "photographer": first_image['user']['name'],
                    "profile_url": first_image['user']['links']['html']
                }
                print(f"‚úÖ [Image Agent] Found image by {image_info['photographer']}")
                return image_info
            else:
                print(f"üü° [Image Agent] No results found for '{term}'.")
                return None

        except requests.exceptions.RequestException as e:
            print(f"‚ùå [Image Agent] Error connecting to Unsplash API: {e}")
            return None
        except Exception as e:
            print(f"‚ùå [Image Agent] An unexpected error occurred: {e}")
            return None

    def handle(self, query: str) -> Optional[Dict]:
        """
        ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà Dispatcher ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
        """
        image_keywords = ["‡∏´‡∏≤‡∏£‡∏π‡∏õ", "‡∏Ç‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ", "‡∏´‡∏≤‡∏†‡∏≤‡∏û", "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á", "‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á"]
        if not any(keyword in query.lower() for keyword in image_keywords):
            return None
        search_term = self._extract_and_translate_search_term(query)
        
        if search_term:
            return self._search(search_term)
        
        return None