# agents/utility_mode/image_agent.py
# (V2 - Standardized & Production-Ready)

import requests
import re
from typing import Optional, Dict

class ImageAgent:
    """
    Agent ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Unsplash
    ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Rule-based ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
    """
    def __init__(self, unsplash_key: str):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ö Unsplash Access Key ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        """
        self.api_key = unsplash_key
        self.api_url = "https://api.unsplash.com/search/photos"
        print("üñºÔ∏è  Image Agent (V2 - API-Driven) is ready.")

    def _search(self, term: str) -> Optional[Dict]:
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        """
        if not self.api_key:
            print("‚ùå [Image Agent] Error: UNSPLASH_ACCESS_KEY is not configured.")
            return None

        params = {
            'query': term,
            'per_page': 1,
            'orientation': 'landscape',
            'lang': 'en'
        }
        headers = {'Authorization': f'Client-ID {self.api_key}'}

        try:
            print(f"üñºÔ∏è  [Image Agent] Searching for '{term}' on Unsplash...")
            response = requests.get(self.api_url, headers=headers, params=params, timeout=10)
            response.raise_for_status() # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTTP Error (4xx or 5xx)

            data = response.json()
            if results := data.get('results'): # ‡πÉ‡∏ä‡πâ Walrus operator (:=) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
                first_image = results[0]
                image_info = {
                    "url": first_image['urls']['regular'],
                    "description": first_image.get('alt_description', 'No description available.'),
                    "photographer": first_image['user']['name'],
                    "profile_url": first_image['user']['links']['html']
                }
                print(f"‚úÖ [Image Agent] Found image by {image_info['photographer']}")
                return image_info
            else:
                print(f"üü° [Image Agent] No results found for '{term}'.")
                return None

        except requests.exceptions.RequestException as e:
            print(f"‚ùå [Image Agent] Error connecting to Unsplash API: {e}")
            return None
        except Exception as e:
            print(f"‚ùå [Image Agent] An unexpected error occurred: {e}")
            return None

    def handle(self, query: str) -> Optional[Dict]:
        """
        ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà Dispatcher ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        # ‚≠êÔ∏è ‡πÉ‡∏ä‡πâ List ‡∏Ç‡∏≠‡∏á Keywords ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‚≠êÔ∏è
        image_keywords = ["‡∏´‡∏≤‡∏£‡∏π‡∏õ", "‡∏Ç‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ", "‡∏´‡∏≤‡∏†‡∏≤‡∏û", "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á", "‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á"]
        
        # ‡πÉ‡∏ä‡πâ loop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ keyword ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á search term ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        for keyword in image_keywords:
            # ‡πÉ‡∏ä‡πâ re.IGNORECASE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å/‡πÉ‡∏´‡∏ç‡πà
            match = re.search(rf"{keyword}\s+(.+)", query, re.IGNORECASE)
            if match:
                search_term = match.group(1).strip()
                return self._search(search_term)
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏≤‡∏£‡∏π‡∏õ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None
        return None