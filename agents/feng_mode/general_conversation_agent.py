# agents/feng_mode/general_conversation_agent.py
# (V6 - KGRAG Powered Conversation)

import json
from typing import Dict, List, Any
from groq import Groq

class GeneralConversationAgent:
    
    def __init__(self, key_manager, model_name: str, rag_engine, persona_prompt: str):
        self.key_manager = key_manager
        self.model_name = model_name
        self.rag_engine = rag_engine
        
        self.general_conversation_prompt = persona_prompt + """
**‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ‡∏™‡∏´‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏ç‡∏ç‡∏≤ (Intellectual Companion)**

‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡πÄ‡∏ü‡∏¥‡∏á" ‡πÉ‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏π‡πà‡∏Ñ‡∏¥‡∏î ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢

**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö:**
- **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á):**
{intuitive_context}
- **‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:**
{history_context}

**‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:**
1.  **‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ï‡∏£‡πà‡∏ï‡∏£‡∏≠‡∏á:** ‡∏ï‡∏≠‡∏ö "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
2.  **‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ô‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô:** ‡∏´‡∏≤‡∏Å "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì" ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà '‡πÑ‡∏°‡πà‡∏°‡∏µ' ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏°‡∏≤‡∏™‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ô‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á...")
3.  **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ï‡πà‡∏≠:** ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏à‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢ "‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡∏¥‡∏î" ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ï‡πà‡∏≠

**‡∏Å‡∏é‡πÄ‡∏´‡∏•‡πá‡∏Å:**
- ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á "‡πÄ‡∏ü‡∏¥‡∏á" ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÑ‡∏ß‡πâ‡πÄ‡∏™‡∏°‡∏≠
- ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤" ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

**‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** "{query}"
**‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏ü‡∏¥‡∏á (‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏™‡∏´‡∏≤‡∏¢):**
"""
        print("ü§ù General Conversation Agent (V6 - KGRAG Powered) is ready.")
    
    def _get_intuitive_context(self, query: str) -> str:
        """
        ‡πÉ‡∏ä‡πâ KGRAGEngine ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á "‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì" ‡∏à‡∏≤‡∏Å Knowledge Graph
        """
        print(f"  - üï∏Ô∏è  Searching KG-RAG for intuition about: '{query}'")
        if not self.rag_engine:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ"
        
        results = self.rag_engine(query, top_k=2)
        
        if not results:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ"
            
        contexts = [f"- '{item.get('name')}': {item.get('description', '')[:70]}..." for item in results]
        return "\n".join(contexts)

    def handle(self, query: str, short_term_memory: List[Dict[str, Any]]) -> str:
        """
        ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà Dispatcher ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
        """
        print(f"üí¨ [General Conversation Agent] Handling: '{query[:40]}...'")

        api_key = self.key_manager.get_key()
        if not api_key:
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"

        try:
            client = Groq(api_key=api_key)
            
            intuitive_context = self._get_intuitive_context(query)
            history_context = "\n".join([f"- {mem.get('role')}: {mem.get('content')}" for mem in short_term_memory])
            
            prompt = self.general_conversation_prompt.format(
                intuitive_context=intuitive_context,
                history_context=history_context,
                query=query
            )
            
            chat_completion = client.chat.completions.create(
                messages=[{"role": "user", "content": prompt}],
                model=self.model_name,
            )
            return chat_completion.choices[0].message.content.strip()
        except Exception as e:
            print(f"‚ùå GeneralConversationAgent LLM Error: {e}")
            if api_key: self.key_manager.report_failure(api_key)
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"