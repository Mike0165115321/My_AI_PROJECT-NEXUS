# agents/presenter_mode/presenter_agent.py

from typing import Dict, List, Any
from groq import Groq

class PresenterAgent:
    """
    Agent ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå NEXUS
    ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ LLM ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á '‡∏ü‡∏≤‡∏á‡∏ã‡∏¥‡∏ô'
    """

    def __init__(self, key_manager: Any, model_name: str, persona_prompt: str):
        """
        ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Agent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß

        Args:
            key_manager (Any): ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API keys (‡πÄ‡∏ä‡πà‡∏ô GroqKeyManager)
            model_name (str): ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏• LLM ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
            persona_prompt (str): Prompt ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á '‡∏ü‡∏≤‡∏á‡∏ã‡∏¥‡∏ô'
        """
        self.key_manager = key_manager
        self.model_name = model_name
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Agent ‡∏ô‡∏µ‡πâ ‡πÇ‡∏î‡∏¢‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å Persona ‡∏´‡∏•‡∏±‡∏Å
        self.presentation_prompt = persona_prompt + """
**‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠**

**‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå:** ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå NEXUS
**‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:** ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏û‡∏π‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞ "‡∏ü‡∏≤‡∏á‡∏ã‡∏¥‡∏ô"

**‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏û‡∏π‡∏î:**
1.  **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô:** ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏û‡∏ö‡∏Å‡∏±‡∏ô
2.  **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏ï‡∏ô:** ‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ "‡∏ü‡∏≤‡∏á‡∏ã‡∏¥‡∏ô" ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏£‡∏¥‡πà‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏ô‡∏µ‡πâ (NEXUS)
3.  **‡∏ö‡∏≠‡∏Å‡πÄ‡∏•‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ (‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö):** ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô AI ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡∏£‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏™‡∏´‡∏≤‡∏¢‡∏Ñ‡∏π‡πà‡∏Ñ‡∏¥‡∏î", "‡∏ö‡∏£‡∏£‡∏ì‡∏≤‡∏£‡∏±‡∏Å‡∏©‡πå‡∏ú‡∏π‡πâ‡∏£‡∏≠‡∏ö‡∏£‡∏π‡πâ", ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå"
4.  **‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô:** ‡πÄ‡∏ä‡∏¥‡∏ç‡∏ä‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏≤‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ

**‡∏¢‡πâ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° "‡∏Å‡∏é‡πÄ‡∏´‡∏•‡πá‡∏Å‡πÅ‡∏´‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏ô" ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î ‡∏´‡πâ‡∏≤‡∏°‡∏´‡∏•‡∏∏‡∏î‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î
**‡∏ö‡∏ó‡∏û‡∏π‡∏î‡∏Ç‡∏≠‡∏á‡∏ü‡∏≤‡∏á‡∏ã‡∏¥‡∏ô:**
"""
        print("üé§ Presenter Agent (V2 - LLM Powered) is ready.")

    def handle(self, query: str, short_term_memory: List[Dict[str, Any]]) -> str:
        """
        ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Agent ‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ö‡∏ó‡∏û‡∏π‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß
        ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ LLM ‡∏ï‡∏≤‡∏° Prompt ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ
        """
        print("üé¨ [Presenter Agent] Generating introduction script using LLM...")
        
        api_key = self.key_manager.get_key()
        if not api_key:
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ü‡∏≤‡∏á‡∏ã‡∏¥‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∞‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"

        try:
            client = Groq(api_key=api_key)
            
            chat_completion = client.chat.completions.create(
                messages=[{"role": "user", "content": self.presentation_prompt}],
                model=self.model_name,
                temperature=0.7 # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            )
            
            response = chat_completion.choices[0].message.content.strip()
            print("‚úÖ [Presenter Agent] Introduction script generated successfully.")
            return response
            
        except Exception as e:
            print(f"‚ùå PresenterAgent LLM Error: {e}")
            if api_key: self.key_manager.report_failure(api_key)
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ü‡∏≤‡∏á‡∏ã‡∏¥‡∏ô‡∏¢‡∏±‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"