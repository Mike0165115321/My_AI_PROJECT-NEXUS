# core/code_executor.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Docker)

import subprocess
import os
import sys
from typing import Tuple

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
SANDBOX_DIR = os.path.join(os.getcwd(), "sandbox_workspace")
os.makedirs(SANDBOX_DIR, exist_ok=True)

class CodeExecutor:
    def __init__(self):
        print("üî¨ ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏•‡∏≠‡∏á Sandbox ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î (‡πÇ‡∏´‡∏°‡∏î: Subprocess)")

    def run_code_in_sandbox(self, code: str) -> Tuple[str, bool]:
        """
        ‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î Python ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        """
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Python ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô sandbox
        temp_script_path = os.path.join(SANDBOX_DIR, "temp_script.py")
        
        try:
            with open(temp_script_path, "w", encoding="utf-8") as f:
                f.write(code)
            command = [sys.executable, temp_script_path]
            
            # --- ‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ subprocess ---
            # timeout=30: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            # cwd=SANDBOX_DIR: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå sandbox ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            # text=True, capture_output=True: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            result = subprocess.run(
                command,
                timeout=30,
                cwd=SANDBOX_DIR,
                text=True,
                capture_output=True,
                # **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå user ‡πÅ‡∏•‡∏∞ network ‡∏ö‡∏ô Windows
                # ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÅ‡∏ï‡πà cwd ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
            )
            
            if result.returncode != 0:
                return result.stderr, True
            else:
                return result.stdout, False

        except subprocess.TimeoutExpired:
            return "Execution timed out after 30 seconds.", True
        except Exception as e:
            return f"An unexpected error occurred during execution: {str(e)}", True
        finally:
            if os.path.exists(temp_script_path):
                os.remove(temp_script_path)